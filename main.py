# -*- coding: utf-8 -*-
"""websec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7m12PmqaFoYXCd3C3HjEQ7PqTnCwOtC
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

urls_data = pd.read_csv("urldata.csv")

urls_data.head()

#dataset Cleaning:
def makeTokens(f):
  tkns_BySlash = str(f.encode('utf-8')).split('/') # make tokens after splitting by slash
  total_Tokens = []

  for i in tkns_BySlash:
    tokens = str(i).split('-') # make tokens after splitting by dash
    tkns_ByDot = []

  for j in range(0,len(tokens)):
    temp_Tokens = str(tokens[j]).split('.') # make tokens after splitting by dot
    tkns_ByDot = tkns_ByDot + temp_Tokens
    total_Tokens = total_Tokens + tokens + tkns_ByDot
    total_Tokens = list(set(total_Tokens))  #remove redundant tokens

  if 'com' in total_Tokens:
    total_Tokens.remove('com') # removing .com since it occurs a lot of times and it should not be included in our features
 
  return total_Tokens

#add features and labels:
url_list = urls_data["url"]
y = urls_data["label"]

vectorizer = TfidfVectorizer(tokenizer=makeTokens)
X = vectorizer.fit_transform(url_list)

#Data splitting:
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#model building using LogisticRegression, for classifying good and bad url
logit = LogisticRegression() #create the model

logit.fit(X_train, y_train) #fir the model on our training dataset

print("Accuracy ",logit.score(X_test, y_test))

#make predictions number 1
X_predict = ["https://www.section.io/engineering-education/",
"https://www.youtube.com/",
"https://www.traversymedia.com/", 
"https://www.kleinehundezuhause.com", 
"http://ttps://www.mecymiafinance.com",
"https://www.atlanticoceanicoilandgas.com",
"https://xsite.singaporetech.edu.sg"]

X_predict = vectorizer.transform(X_predict)
New_predict = logit.predict(X_predict)

print(New_predict)

#make prediction number 2
X_predict1 = ["www.buyfakebillsonlinee.blogspot.com", 
"www.unitedairlineslogistics.com",
"www.stonehousedelivery.com",
"www.silkroadmeds-onlinepharmacy.com" ]

X_predict1 = vectorizer.transform(X_predict1)
New_predict1 = logit.predict(X_predict1)
print(New_predict1)
